// <auto-generated />
using System;
using Aula03.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aula03.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230410121126_CreateDatabase")]
    partial class CreateDatabase
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Atendimentos", b =>
                {
                    b.Property<int>("AtendimentoID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProdutoID")
                        .HasColumnType("INTEGER");

                    b.HasKey("AtendimentoID", "ProdutoID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Atendimentos", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Atendimento", b =>
                {
                    b.Property<int?>("AtendimentoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("GarcomID")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("InitDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MesaID")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("AtendimentoID");

                    b.HasIndex("GarcomID");

                    b.HasIndex("MesaID");

                    b.ToTable("Atendimento", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.BooksModel", b =>
                {
                    b.Property<int?>("BookID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<byte[]>("Content")
                        .HasColumnType("BLOB");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.Property<int?>("PublicationYear")
                        .IsRequired()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserID")
                        .HasColumnType("INTEGER");

                    b.HasKey("BookID");

                    b.HasIndex("UserID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("Aula03.Models.EventsModel", b =>
                {
                    b.Property<int?>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Desc")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EventID");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Aula03.Models.Garcom", b =>
                {
                    b.Property<int?>("GarcomID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("GarcomID");

                    b.ToTable("Garcom", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Mesa", b =>
                {
                    b.Property<int?>("MesaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("MesaID");

                    b.ToTable("Mesa", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Produto", b =>
                {
                    b.Property<int?>("ProdutoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.HasKey("ProdutoID");

                    b.ToTable("Produto", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.User", b =>
                {
                    b.Property<int?>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsAdm")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Atendimentos", b =>
                {
                    b.HasOne("Aula03.Models.Atendimento", null)
                        .WithMany()
                        .HasForeignKey("AtendimentoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aula03.Models.Produto", null)
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Aula03.Models.Atendimento", b =>
                {
                    b.HasOne("Aula03.Models.Garcom", "Garcom")
                        .WithMany()
                        .HasForeignKey("GarcomID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aula03.Models.Mesa", "Mesa")
                        .WithMany()
                        .HasForeignKey("MesaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Garcom");

                    b.Navigation("Mesa");
                });

            modelBuilder.Entity("Aula03.Models.BooksModel", b =>
                {
                    b.HasOne("Aula03.Models.User", null)
                        .WithMany("Books")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Aula03.Models.User", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
