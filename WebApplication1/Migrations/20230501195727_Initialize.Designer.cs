// <auto-generated />
using System;
using Aula03.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Aula03.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230501195727_Initialize")]
    partial class Initialize
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

            modelBuilder.Entity("Aula03.Models.Category", b =>
                {
                    b.Property<int?>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CategoryID");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Product", b =>
                {
                    b.Property<int?>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CategoryID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<double?>("Price")
                        .IsRequired()
                        .HasColumnType("REAL");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Service", b =>
                {
                    b.Property<int?>("ServiceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinishDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InitDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TableID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("WaiterID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID");

                    b.HasIndex("TableID");

                    b.HasIndex("WaiterID");

                    b.ToTable("Service", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.ServiceProduct", b =>
                {
                    b.Property<int?>("ServiceProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Amount")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ProductID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceProductID");

                    b.HasIndex("ProductID");

                    b.ToTable("ServiceProduct", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Table", b =>
                {
                    b.Property<int?>("TableID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LiberationTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("Status")
                        .HasColumnType("INTEGER");

                    b.HasKey("TableID");

                    b.ToTable("Table", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Waiter", b =>
                {
                    b.Property<int?>("WaiterID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("BirthDate")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Cellphone")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("WaiterID");

                    b.ToTable("Waiter", (string)null);
                });

            modelBuilder.Entity("ServiceXServiceProducts", b =>
                {
                    b.Property<int>("ServiceID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ServiceProductID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ServiceID", "ServiceProductID");

                    b.HasIndex("ServiceProductID");

                    b.ToTable("ServiceXServiceProducts", (string)null);
                });

            modelBuilder.Entity("Aula03.Models.Product", b =>
                {
                    b.HasOne("Aula03.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Aula03.Models.Service", b =>
                {
                    b.HasOne("Aula03.Models.Table", "Table")
                        .WithMany()
                        .HasForeignKey("TableID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aula03.Models.Waiter", "Waiter")
                        .WithMany()
                        .HasForeignKey("WaiterID");

                    b.Navigation("Table");

                    b.Navigation("Waiter");
                });

            modelBuilder.Entity("Aula03.Models.ServiceProduct", b =>
                {
                    b.HasOne("Aula03.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ServiceXServiceProducts", b =>
                {
                    b.HasOne("Aula03.Models.Service", null)
                        .WithMany()
                        .HasForeignKey("ServiceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aula03.Models.ServiceProduct", null)
                        .WithMany()
                        .HasForeignKey("ServiceProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
